package com.ljstudio.android.loveday.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ljstudio.android.loveday.entity.DaysData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAYS_DATA".
*/
public class DaysDataDao extends AbstractDao<DaysData, Long> {

    public static final String TABLENAME = "DAYS_DATA";

    /**
     * Properties of entity DaysData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Days = new Property(3, String.class, "days", false, "DAYS");
        public final static Property Unit = new Property(4, String.class, "unit", false, "UNIT");
        public final static Property IsTop = new Property(5, boolean.class, "isTop", false, "IS_TOP");
    }


    public DaysDataDao(DaoConfig config) {
        super(config);
    }
    
    public DaysDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAYS_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"DATE\" TEXT," + // 2: date
                "\"DAYS\" TEXT," + // 3: days
                "\"UNIT\" TEXT," + // 4: unit
                "\"IS_TOP\" INTEGER NOT NULL );"); // 5: isTop
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAYS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaysData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String days = entity.getDays();
        if (days != null) {
            stmt.bindString(4, days);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
        stmt.bindLong(6, entity.getIsTop() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaysData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String days = entity.getDays();
        if (days != null) {
            stmt.bindString(4, days);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(5, unit);
        }
        stmt.bindLong(6, entity.getIsTop() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DaysData readEntity(Cursor cursor, int offset) {
        DaysData entity = new DaysData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // days
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unit
            cursor.getShort(offset + 5) != 0 // isTop
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaysData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDays(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsTop(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DaysData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DaysData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaysData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
